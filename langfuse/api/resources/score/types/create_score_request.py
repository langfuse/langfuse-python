# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ....core.serialization import FieldMetadata
from ...commons.types.create_score_value import CreateScoreValue
from ...commons.types.score_data_type import ScoreDataType


class CreateScoreRequest(UniversalBaseModel):
    """
    Examples
    --------
    from langfuse.resources.score import CreateScoreRequest

    CreateScoreRequest(
        name="novelty",
        value=0.9,
        trace_id="cdef-1234-5678-90ab",
    )
    """

    id: typing.Optional[str] = None
    trace_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="traceId")
    ] = None
    session_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="sessionId")
    ] = None
    observation_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="observationId")
    ] = None
    dataset_run_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="datasetRunId")
    ] = None
    name: str
    value: CreateScoreValue = pydantic.Field()
    """
    The value of the score. Must be passed as string for categorical scores, and numeric for boolean and numeric scores. Boolean score values must equal either 1 or 0 (true or false)
    """

    comment: typing.Optional[str] = None
    metadata: typing.Optional[typing.Optional[typing.Any]] = None
    environment: typing.Optional[str] = pydantic.Field(default=None)
    """
    The environment of the score. Can be any lowercase alphanumeric string with hyphens and underscores that does not start with 'langfuse'.
    """

    data_type: typing_extensions.Annotated[
        typing.Optional[ScoreDataType], FieldMetadata(alias="dataType")
    ] = pydantic.Field(default=None)
    """
    The data type of the score. When passing a configId this field is inferred. Otherwise, this field must be passed or will default to numeric.
    """

    config_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="configId")
    ] = pydantic.Field(default=None)
    """
    Reference a score config on a score. The unique langfuse identifier of a score config. When passing this field, the dataType and stringValue fields are automatically populated.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
