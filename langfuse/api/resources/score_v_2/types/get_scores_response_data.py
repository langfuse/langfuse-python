# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ....core.serialization import FieldMetadata
from ...commons.types.score_source import ScoreSource
from .get_scores_response_trace_data import GetScoresResponseTraceData


class GetScoresResponseData_Numeric(UniversalBaseModel):
    data_type: typing_extensions.Annotated[
        typing.Literal["NUMERIC"], FieldMetadata(alias="dataType")
    ] = "NUMERIC"
    trace: typing.Optional[GetScoresResponseTraceData] = None
    value: float
    id: str
    trace_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="traceId")
    ] = None
    session_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="sessionId")
    ] = None
    observation_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="observationId")
    ] = None
    dataset_run_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="datasetRunId")
    ] = None
    name: str
    source: ScoreSource
    timestamp: dt.datetime
    created_at: typing_extensions.Annotated[
        dt.datetime, FieldMetadata(alias="createdAt")
    ]
    updated_at: typing_extensions.Annotated[
        dt.datetime, FieldMetadata(alias="updatedAt")
    ]
    author_user_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="authorUserId")
    ] = None
    comment: typing.Optional[str] = None
    metadata: typing.Optional[typing.Optional[typing.Any]] = None
    config_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="configId")
    ] = None
    queue_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="queueId")
    ] = None
    environment: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class GetScoresResponseData_Categorical(UniversalBaseModel):
    data_type: typing_extensions.Annotated[
        typing.Literal["CATEGORICAL"], FieldMetadata(alias="dataType")
    ] = "CATEGORICAL"
    trace: typing.Optional[GetScoresResponseTraceData] = None
    value: typing.Optional[float] = None
    string_value: typing_extensions.Annotated[str, FieldMetadata(alias="stringValue")]
    id: str
    trace_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="traceId")
    ] = None
    session_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="sessionId")
    ] = None
    observation_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="observationId")
    ] = None
    dataset_run_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="datasetRunId")
    ] = None
    name: str
    source: ScoreSource
    timestamp: dt.datetime
    created_at: typing_extensions.Annotated[
        dt.datetime, FieldMetadata(alias="createdAt")
    ]
    updated_at: typing_extensions.Annotated[
        dt.datetime, FieldMetadata(alias="updatedAt")
    ]
    author_user_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="authorUserId")
    ] = None
    comment: typing.Optional[str] = None
    metadata: typing.Optional[typing.Optional[typing.Any]] = None
    config_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="configId")
    ] = None
    queue_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="queueId")
    ] = None
    environment: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class GetScoresResponseData_Boolean(UniversalBaseModel):
    data_type: typing_extensions.Annotated[
        typing.Literal["BOOLEAN"], FieldMetadata(alias="dataType")
    ] = "BOOLEAN"
    trace: typing.Optional[GetScoresResponseTraceData] = None
    value: float
    string_value: typing_extensions.Annotated[str, FieldMetadata(alias="stringValue")]
    id: str
    trace_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="traceId")
    ] = None
    session_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="sessionId")
    ] = None
    observation_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="observationId")
    ] = None
    dataset_run_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="datasetRunId")
    ] = None
    name: str
    source: ScoreSource
    timestamp: dt.datetime
    created_at: typing_extensions.Annotated[
        dt.datetime, FieldMetadata(alias="createdAt")
    ]
    updated_at: typing_extensions.Annotated[
        dt.datetime, FieldMetadata(alias="updatedAt")
    ]
    author_user_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="authorUserId")
    ] = None
    comment: typing.Optional[str] = None
    metadata: typing.Optional[typing.Optional[typing.Any]] = None
    config_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="configId")
    ] = None
    queue_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="queueId")
    ] = None
    environment: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


GetScoresResponseData = typing.Union[
    GetScoresResponseData_Numeric,
    GetScoresResponseData_Categorical,
    GetScoresResponseData_Boolean,
]
