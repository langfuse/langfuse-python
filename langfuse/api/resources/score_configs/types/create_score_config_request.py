# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ....core.serialization import FieldMetadata
from ...commons.types.config_category import ConfigCategory
from ...commons.types.score_data_type import ScoreDataType


class CreateScoreConfigRequest(UniversalBaseModel):
    name: str
    data_type: typing_extensions.Annotated[
        ScoreDataType, FieldMetadata(alias="dataType")
    ]
    categories: typing.Optional[typing.List[ConfigCategory]] = pydantic.Field(
        default=None
    )
    """
    Configure custom categories for categorical scores. Pass a list of objects with `label` and `value` properties. Categories are autogenerated for boolean configs and cannot be passed
    """

    min_value: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="minValue")
    ] = pydantic.Field(default=None)
    """
    Configure a minimum value for numerical scores. If not set, the minimum value defaults to -∞
    """

    max_value: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="maxValue")
    ] = pydantic.Field(default=None)
    """
    Configure a maximum value for numerical scores. If not set, the maximum value defaults to +∞
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    Description is shown across the Langfuse UI and can be used to e.g. explain the config categories in detail, why a numeric range was set, or provide additional context on config name or usage
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
