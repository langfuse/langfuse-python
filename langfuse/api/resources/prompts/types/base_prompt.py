# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ....core.serialization import FieldMetadata


class BasePrompt(UniversalBaseModel):
    name: str
    version: int
    config: typing.Optional[typing.Any] = None
    labels: typing.List[str] = pydantic.Field()
    """
    List of deployment labels of this prompt version.
    """

    tags: typing.List[str] = pydantic.Field()
    """
    List of tags. Used to filter via UI and API. The same across versions of a prompt.
    """

    commit_message: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="commitMessage")
    ] = pydantic.Field(default=None)
    """
    Commit message for this prompt version.
    """

    resolution_graph: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]],
        FieldMetadata(alias="resolutionGraph"),
    ] = pydantic.Field(default=None)
    """
    The dependency resolution graph for the current prompt. Null if prompt has no dependencies.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
