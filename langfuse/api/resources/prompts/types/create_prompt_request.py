# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ....core.serialization import FieldMetadata
from .chat_message_with_placeholders import ChatMessageWithPlaceholders


class CreatePromptRequest_Chat(UniversalBaseModel):
    type: typing.Literal["chat"] = "chat"
    name: str
    prompt: typing.List[ChatMessageWithPlaceholders]
    config: typing.Optional[typing.Optional[typing.Any]] = None
    labels: typing.Optional[typing.List[str]] = None
    tags: typing.Optional[typing.List[str]] = None
    commit_message: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="commitMessage")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CreatePromptRequest_Text(UniversalBaseModel):
    type: typing.Literal["text"] = "text"
    name: str
    prompt: str
    config: typing.Optional[typing.Optional[typing.Any]] = None
    labels: typing.Optional[typing.List[str]] = None
    tags: typing.Optional[typing.List[str]] = None
    commit_message: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="commitMessage")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


CreatePromptRequest = typing.Union[CreatePromptRequest_Chat, CreatePromptRequest_Text]
