# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ....core.serialization import FieldMetadata
from .llm_adapter import LlmAdapter


class UpsertLlmConnectionRequest(UniversalBaseModel):
    """
    Request to create or update an LLM connection (upsert)
    """

    provider: str = pydantic.Field()
    """
    Provider name (e.g., 'openai', 'my-gateway'). Must be unique in project, used for upserting.
    """

    adapter: LlmAdapter = pydantic.Field()
    """
    The adapter used to interface with the LLM
    """

    secret_key: typing_extensions.Annotated[str, FieldMetadata(alias="secretKey")] = (
        pydantic.Field()
    )
    """
    Secret key for the LLM API.
    """

    base_url: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="baseURL")
    ] = pydantic.Field(default=None)
    """
    Custom base URL for the LLM API
    """

    custom_models: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="customModels")
    ] = pydantic.Field(default=None)
    """
    List of custom model names
    """

    with_default_models: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="withDefaultModels")
    ] = pydantic.Field(default=None)
    """
    Whether to include default models. Default is true.
    """

    extra_headers: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, str]], FieldMetadata(alias="extraHeaders")
    ] = pydantic.Field(default=None)
    """
    Extra headers to send with requests
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
