# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ....core.serialization import FieldMetadata


class LlmConnection(UniversalBaseModel):
    """
    LLM API connection configuration (secrets excluded)
    """

    id: str
    provider: str = pydantic.Field()
    """
    Provider name (e.g., 'openai', 'my-gateway'). Must be unique in project, used for upserting.
    """

    adapter: str = pydantic.Field()
    """
    The adapter used to interface with the LLM
    """

    display_secret_key: typing_extensions.Annotated[
        str, FieldMetadata(alias="displaySecretKey")
    ] = pydantic.Field()
    """
    Masked version of the secret key for display purposes
    """

    base_url: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="baseURL")
    ] = pydantic.Field(default=None)
    """
    Custom base URL for the LLM API
    """

    custom_models: typing_extensions.Annotated[
        typing.List[str], FieldMetadata(alias="customModels")
    ] = pydantic.Field()
    """
    List of custom model names available for this connection
    """

    with_default_models: typing_extensions.Annotated[
        bool, FieldMetadata(alias="withDefaultModels")
    ] = pydantic.Field()
    """
    Whether to include default models for this adapter
    """

    extra_header_keys: typing_extensions.Annotated[
        typing.List[str], FieldMetadata(alias="extraHeaderKeys")
    ] = pydantic.Field()
    """
    Keys of extra headers sent with requests (values excluded for security)
    """

    created_at: typing_extensions.Annotated[
        dt.datetime, FieldMetadata(alias="createdAt")
    ]
    updated_at: typing_extensions.Annotated[
        dt.datetime, FieldMetadata(alias="updatedAt")
    ]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
