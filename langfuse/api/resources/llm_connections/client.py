# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from .raw_client import AsyncRawLlmConnectionsClient, RawLlmConnectionsClient
from .types.llm_connection import LlmConnection
from .types.paginated_llm_connections import PaginatedLlmConnections
from .types.upsert_llm_connection_request import UpsertLlmConnectionRequest

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class LlmConnectionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawLlmConnectionsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawLlmConnectionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawLlmConnectionsClient
        """
        return self._raw_client

    def list(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedLlmConnections:
        """
        Get all LLM connections in a project

        Parameters
        ----------
        page : typing.Optional[int]
            page number, starts at 1

        limit : typing.Optional[int]
            limit of items per page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedLlmConnections

        Examples
        --------
        from langfuse import FernLangfuse

        client = FernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )
        client.llm_connections.list()
        """
        _response = self._raw_client.list(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def upsert(
        self,
        *,
        request: UpsertLlmConnectionRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> LlmConnection:
        """
        Create or update an LLM connection. The connection is upserted on provider.

        Parameters
        ----------
        request : UpsertLlmConnectionRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LlmConnection

        Examples
        --------
        from langfuse import FernLangfuse
        from langfuse.resources.llm_connections import UpsertLlmConnectionRequest

        client = FernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )
        client.llm_connections.upsert(
            request=UpsertLlmConnectionRequest(
                provider="provider",
                adapter="anthropic",
                secret_key="secretKey",
            ),
        )
        """
        _response = self._raw_client.upsert(
            request=request, request_options=request_options
        )
        return _response.data


class AsyncLlmConnectionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawLlmConnectionsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawLlmConnectionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawLlmConnectionsClient
        """
        return self._raw_client

    async def list(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedLlmConnections:
        """
        Get all LLM connections in a project

        Parameters
        ----------
        page : typing.Optional[int]
            page number, starts at 1

        limit : typing.Optional[int]
            limit of items per page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedLlmConnections

        Examples
        --------
        import asyncio

        from langfuse import AsyncFernLangfuse

        client = AsyncFernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.llm_connections.list()


        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def upsert(
        self,
        *,
        request: UpsertLlmConnectionRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> LlmConnection:
        """
        Create or update an LLM connection. The connection is upserted on provider.

        Parameters
        ----------
        request : UpsertLlmConnectionRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LlmConnection

        Examples
        --------
        import asyncio

        from langfuse import AsyncFernLangfuse
        from langfuse.resources.llm_connections import UpsertLlmConnectionRequest

        client = AsyncFernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.llm_connections.upsert(
                request=UpsertLlmConnectionRequest(
                    provider="provider",
                    adapter="anthropic",
                    secret_key="secretKey",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.upsert(
            request=request, request_options=request_options
        )
        return _response.data
