# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .api_key_deletion_response import ApiKeyDeletionResponse
    from .api_key_list import ApiKeyList
    from .api_key_response import ApiKeyResponse
    from .api_key_summary import ApiKeySummary
    from .project import Project
    from .project_deletion_response import ProjectDeletionResponse
    from .projects import Projects
_dynamic_imports: typing.Dict[str, str] = {
    "ApiKeyDeletionResponse": ".api_key_deletion_response",
    "ApiKeyList": ".api_key_list",
    "ApiKeyResponse": ".api_key_response",
    "ApiKeySummary": ".api_key_summary",
    "Project": ".project",
    "ProjectDeletionResponse": ".project_deletion_response",
    "Projects": ".projects",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(
            f"No {attr_name} found in _dynamic_imports for module name -> {__name__}"
        )
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(
            f"Failed to import {attr_name} from {module_name}: {e}"
        ) from e
    except AttributeError as e:
        raise AttributeError(
            f"Failed to get {attr_name} from {module_name}: {e}"
        ) from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "ApiKeyDeletionResponse",
    "ApiKeyList",
    "ApiKeyResponse",
    "ApiKeySummary",
    "Project",
    "ProjectDeletionResponse",
    "Projects",
]
