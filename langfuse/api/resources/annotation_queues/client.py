# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from .raw_client import AsyncRawAnnotationQueuesClient, RawAnnotationQueuesClient
from .types.annotation_queue import AnnotationQueue
from .types.annotation_queue_assignment_request import AnnotationQueueAssignmentRequest
from .types.annotation_queue_item import AnnotationQueueItem
from .types.annotation_queue_status import AnnotationQueueStatus
from .types.create_annotation_queue_assignment_response import (
    CreateAnnotationQueueAssignmentResponse,
)
from .types.create_annotation_queue_item_request import CreateAnnotationQueueItemRequest
from .types.create_annotation_queue_request import CreateAnnotationQueueRequest
from .types.delete_annotation_queue_assignment_response import (
    DeleteAnnotationQueueAssignmentResponse,
)
from .types.delete_annotation_queue_item_response import (
    DeleteAnnotationQueueItemResponse,
)
from .types.paginated_annotation_queue_items import PaginatedAnnotationQueueItems
from .types.paginated_annotation_queues import PaginatedAnnotationQueues
from .types.update_annotation_queue_item_request import UpdateAnnotationQueueItemRequest

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AnnotationQueuesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawAnnotationQueuesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawAnnotationQueuesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawAnnotationQueuesClient
        """
        return self._raw_client

    def list_queues(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedAnnotationQueues:
        """
        Get all annotation queues

        Parameters
        ----------
        page : typing.Optional[int]
            page number, starts at 1

        limit : typing.Optional[int]
            limit of items per page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedAnnotationQueues

        Examples
        --------
        from langfuse import FernLangfuse

        client = FernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )
        client.annotation_queues.list_queues()
        """
        _response = self._raw_client.list_queues(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def create_queue(
        self,
        *,
        request: CreateAnnotationQueueRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AnnotationQueue:
        """
        Create an annotation queue

        Parameters
        ----------
        request : CreateAnnotationQueueRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AnnotationQueue

        Examples
        --------
        from langfuse import FernLangfuse
        from langfuse.resources.annotation_queues import CreateAnnotationQueueRequest

        client = FernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )
        client.annotation_queues.create_queue(
            request=CreateAnnotationQueueRequest(
                name="name",
                score_config_ids=["scoreConfigIds", "scoreConfigIds"],
            ),
        )
        """
        _response = self._raw_client.create_queue(
            request=request, request_options=request_options
        )
        return _response.data

    def get_queue(
        self, queue_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AnnotationQueue:
        """
        Get an annotation queue by ID

        Parameters
        ----------
        queue_id : str
            The unique identifier of the annotation queue

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AnnotationQueue

        Examples
        --------
        from langfuse import FernLangfuse

        client = FernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )
        client.annotation_queues.get_queue(
            queue_id="queueId",
        )
        """
        _response = self._raw_client.get_queue(
            queue_id, request_options=request_options
        )
        return _response.data

    def list_queue_items(
        self,
        queue_id: str,
        *,
        status: typing.Optional[AnnotationQueueStatus] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedAnnotationQueueItems:
        """
        Get items for a specific annotation queue

        Parameters
        ----------
        queue_id : str
            The unique identifier of the annotation queue

        status : typing.Optional[AnnotationQueueStatus]
            Filter by status

        page : typing.Optional[int]
            page number, starts at 1

        limit : typing.Optional[int]
            limit of items per page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedAnnotationQueueItems

        Examples
        --------
        from langfuse import FernLangfuse

        client = FernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )
        client.annotation_queues.list_queue_items(
            queue_id="queueId",
        )
        """
        _response = self._raw_client.list_queue_items(
            queue_id,
            status=status,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    def get_queue_item(
        self,
        queue_id: str,
        item_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AnnotationQueueItem:
        """
        Get a specific item from an annotation queue

        Parameters
        ----------
        queue_id : str
            The unique identifier of the annotation queue

        item_id : str
            The unique identifier of the annotation queue item

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AnnotationQueueItem

        Examples
        --------
        from langfuse import FernLangfuse

        client = FernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )
        client.annotation_queues.get_queue_item(
            queue_id="queueId",
            item_id="itemId",
        )
        """
        _response = self._raw_client.get_queue_item(
            queue_id, item_id, request_options=request_options
        )
        return _response.data

    def create_queue_item(
        self,
        queue_id: str,
        *,
        request: CreateAnnotationQueueItemRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AnnotationQueueItem:
        """
        Add an item to an annotation queue

        Parameters
        ----------
        queue_id : str
            The unique identifier of the annotation queue

        request : CreateAnnotationQueueItemRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AnnotationQueueItem

        Examples
        --------
        from langfuse import FernLangfuse
        from langfuse.resources.annotation_queues import (
            CreateAnnotationQueueItemRequest,
        )

        client = FernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )
        client.annotation_queues.create_queue_item(
            queue_id="queueId",
            request=CreateAnnotationQueueItemRequest(
                object_id="objectId",
                object_type="TRACE",
            ),
        )
        """
        _response = self._raw_client.create_queue_item(
            queue_id, request=request, request_options=request_options
        )
        return _response.data

    def update_queue_item(
        self,
        queue_id: str,
        item_id: str,
        *,
        request: UpdateAnnotationQueueItemRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AnnotationQueueItem:
        """
        Update an annotation queue item

        Parameters
        ----------
        queue_id : str
            The unique identifier of the annotation queue

        item_id : str
            The unique identifier of the annotation queue item

        request : UpdateAnnotationQueueItemRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AnnotationQueueItem

        Examples
        --------
        from langfuse import FernLangfuse
        from langfuse.resources.annotation_queues import (
            UpdateAnnotationQueueItemRequest,
        )

        client = FernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )
        client.annotation_queues.update_queue_item(
            queue_id="queueId",
            item_id="itemId",
            request=UpdateAnnotationQueueItemRequest(),
        )
        """
        _response = self._raw_client.update_queue_item(
            queue_id, item_id, request=request, request_options=request_options
        )
        return _response.data

    def delete_queue_item(
        self,
        queue_id: str,
        item_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeleteAnnotationQueueItemResponse:
        """
        Remove an item from an annotation queue

        Parameters
        ----------
        queue_id : str
            The unique identifier of the annotation queue

        item_id : str
            The unique identifier of the annotation queue item

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteAnnotationQueueItemResponse

        Examples
        --------
        from langfuse import FernLangfuse

        client = FernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )
        client.annotation_queues.delete_queue_item(
            queue_id="queueId",
            item_id="itemId",
        )
        """
        _response = self._raw_client.delete_queue_item(
            queue_id, item_id, request_options=request_options
        )
        return _response.data

    def create_queue_assignment(
        self,
        queue_id: str,
        *,
        request: AnnotationQueueAssignmentRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateAnnotationQueueAssignmentResponse:
        """
        Create an assignment for a user to an annotation queue

        Parameters
        ----------
        queue_id : str
            The unique identifier of the annotation queue

        request : AnnotationQueueAssignmentRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateAnnotationQueueAssignmentResponse

        Examples
        --------
        from langfuse import FernLangfuse
        from langfuse.resources.annotation_queues import (
            AnnotationQueueAssignmentRequest,
        )

        client = FernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )
        client.annotation_queues.create_queue_assignment(
            queue_id="queueId",
            request=AnnotationQueueAssignmentRequest(
                user_id="userId",
            ),
        )
        """
        _response = self._raw_client.create_queue_assignment(
            queue_id, request=request, request_options=request_options
        )
        return _response.data

    def delete_queue_assignment(
        self,
        queue_id: str,
        *,
        request: AnnotationQueueAssignmentRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeleteAnnotationQueueAssignmentResponse:
        """
        Delete an assignment for a user to an annotation queue

        Parameters
        ----------
        queue_id : str
            The unique identifier of the annotation queue

        request : AnnotationQueueAssignmentRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteAnnotationQueueAssignmentResponse

        Examples
        --------
        from langfuse import FernLangfuse
        from langfuse.resources.annotation_queues import (
            AnnotationQueueAssignmentRequest,
        )

        client = FernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )
        client.annotation_queues.delete_queue_assignment(
            queue_id="queueId",
            request=AnnotationQueueAssignmentRequest(
                user_id="userId",
            ),
        )
        """
        _response = self._raw_client.delete_queue_assignment(
            queue_id, request=request, request_options=request_options
        )
        return _response.data


class AsyncAnnotationQueuesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawAnnotationQueuesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawAnnotationQueuesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawAnnotationQueuesClient
        """
        return self._raw_client

    async def list_queues(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedAnnotationQueues:
        """
        Get all annotation queues

        Parameters
        ----------
        page : typing.Optional[int]
            page number, starts at 1

        limit : typing.Optional[int]
            limit of items per page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedAnnotationQueues

        Examples
        --------
        import asyncio

        from langfuse import AsyncFernLangfuse

        client = AsyncFernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.annotation_queues.list_queues()


        asyncio.run(main())
        """
        _response = await self._raw_client.list_queues(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def create_queue(
        self,
        *,
        request: CreateAnnotationQueueRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AnnotationQueue:
        """
        Create an annotation queue

        Parameters
        ----------
        request : CreateAnnotationQueueRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AnnotationQueue

        Examples
        --------
        import asyncio

        from langfuse import AsyncFernLangfuse
        from langfuse.resources.annotation_queues import CreateAnnotationQueueRequest

        client = AsyncFernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.annotation_queues.create_queue(
                request=CreateAnnotationQueueRequest(
                    name="name",
                    score_config_ids=["scoreConfigIds", "scoreConfigIds"],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_queue(
            request=request, request_options=request_options
        )
        return _response.data

    async def get_queue(
        self, queue_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AnnotationQueue:
        """
        Get an annotation queue by ID

        Parameters
        ----------
        queue_id : str
            The unique identifier of the annotation queue

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AnnotationQueue

        Examples
        --------
        import asyncio

        from langfuse import AsyncFernLangfuse

        client = AsyncFernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.annotation_queues.get_queue(
                queue_id="queueId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_queue(
            queue_id, request_options=request_options
        )
        return _response.data

    async def list_queue_items(
        self,
        queue_id: str,
        *,
        status: typing.Optional[AnnotationQueueStatus] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedAnnotationQueueItems:
        """
        Get items for a specific annotation queue

        Parameters
        ----------
        queue_id : str
            The unique identifier of the annotation queue

        status : typing.Optional[AnnotationQueueStatus]
            Filter by status

        page : typing.Optional[int]
            page number, starts at 1

        limit : typing.Optional[int]
            limit of items per page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedAnnotationQueueItems

        Examples
        --------
        import asyncio

        from langfuse import AsyncFernLangfuse

        client = AsyncFernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.annotation_queues.list_queue_items(
                queue_id="queueId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_queue_items(
            queue_id,
            status=status,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    async def get_queue_item(
        self,
        queue_id: str,
        item_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AnnotationQueueItem:
        """
        Get a specific item from an annotation queue

        Parameters
        ----------
        queue_id : str
            The unique identifier of the annotation queue

        item_id : str
            The unique identifier of the annotation queue item

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AnnotationQueueItem

        Examples
        --------
        import asyncio

        from langfuse import AsyncFernLangfuse

        client = AsyncFernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.annotation_queues.get_queue_item(
                queue_id="queueId",
                item_id="itemId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_queue_item(
            queue_id, item_id, request_options=request_options
        )
        return _response.data

    async def create_queue_item(
        self,
        queue_id: str,
        *,
        request: CreateAnnotationQueueItemRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AnnotationQueueItem:
        """
        Add an item to an annotation queue

        Parameters
        ----------
        queue_id : str
            The unique identifier of the annotation queue

        request : CreateAnnotationQueueItemRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AnnotationQueueItem

        Examples
        --------
        import asyncio

        from langfuse import AsyncFernLangfuse
        from langfuse.resources.annotation_queues import (
            CreateAnnotationQueueItemRequest,
        )

        client = AsyncFernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.annotation_queues.create_queue_item(
                queue_id="queueId",
                request=CreateAnnotationQueueItemRequest(
                    object_id="objectId",
                    object_type="TRACE",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_queue_item(
            queue_id, request=request, request_options=request_options
        )
        return _response.data

    async def update_queue_item(
        self,
        queue_id: str,
        item_id: str,
        *,
        request: UpdateAnnotationQueueItemRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AnnotationQueueItem:
        """
        Update an annotation queue item

        Parameters
        ----------
        queue_id : str
            The unique identifier of the annotation queue

        item_id : str
            The unique identifier of the annotation queue item

        request : UpdateAnnotationQueueItemRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AnnotationQueueItem

        Examples
        --------
        import asyncio

        from langfuse import AsyncFernLangfuse
        from langfuse.resources.annotation_queues import (
            UpdateAnnotationQueueItemRequest,
        )

        client = AsyncFernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.annotation_queues.update_queue_item(
                queue_id="queueId",
                item_id="itemId",
                request=UpdateAnnotationQueueItemRequest(),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_queue_item(
            queue_id, item_id, request=request, request_options=request_options
        )
        return _response.data

    async def delete_queue_item(
        self,
        queue_id: str,
        item_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeleteAnnotationQueueItemResponse:
        """
        Remove an item from an annotation queue

        Parameters
        ----------
        queue_id : str
            The unique identifier of the annotation queue

        item_id : str
            The unique identifier of the annotation queue item

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteAnnotationQueueItemResponse

        Examples
        --------
        import asyncio

        from langfuse import AsyncFernLangfuse

        client = AsyncFernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.annotation_queues.delete_queue_item(
                queue_id="queueId",
                item_id="itemId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_queue_item(
            queue_id, item_id, request_options=request_options
        )
        return _response.data

    async def create_queue_assignment(
        self,
        queue_id: str,
        *,
        request: AnnotationQueueAssignmentRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateAnnotationQueueAssignmentResponse:
        """
        Create an assignment for a user to an annotation queue

        Parameters
        ----------
        queue_id : str
            The unique identifier of the annotation queue

        request : AnnotationQueueAssignmentRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateAnnotationQueueAssignmentResponse

        Examples
        --------
        import asyncio

        from langfuse import AsyncFernLangfuse
        from langfuse.resources.annotation_queues import (
            AnnotationQueueAssignmentRequest,
        )

        client = AsyncFernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.annotation_queues.create_queue_assignment(
                queue_id="queueId",
                request=AnnotationQueueAssignmentRequest(
                    user_id="userId",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_queue_assignment(
            queue_id, request=request, request_options=request_options
        )
        return _response.data

    async def delete_queue_assignment(
        self,
        queue_id: str,
        *,
        request: AnnotationQueueAssignmentRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeleteAnnotationQueueAssignmentResponse:
        """
        Delete an assignment for a user to an annotation queue

        Parameters
        ----------
        queue_id : str
            The unique identifier of the annotation queue

        request : AnnotationQueueAssignmentRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteAnnotationQueueAssignmentResponse

        Examples
        --------
        import asyncio

        from langfuse import AsyncFernLangfuse
        from langfuse.resources.annotation_queues import (
            AnnotationQueueAssignmentRequest,
        )

        client = AsyncFernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.annotation_queues.delete_queue_assignment(
                queue_id="queueId",
                request=AnnotationQueueAssignmentRequest(
                    user_id="userId",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_queue_assignment(
            queue_id, request=request, request_options=request_options
        )
        return _response.data
