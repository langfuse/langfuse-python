# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .annotation_queue import AnnotationQueue
    from .annotation_queue_assignment_request import AnnotationQueueAssignmentRequest
    from .annotation_queue_item import AnnotationQueueItem
    from .annotation_queue_object_type import AnnotationQueueObjectType
    from .annotation_queue_status import AnnotationQueueStatus
    from .create_annotation_queue_assignment_response import (
        CreateAnnotationQueueAssignmentResponse,
    )
    from .create_annotation_queue_item_request import CreateAnnotationQueueItemRequest
    from .create_annotation_queue_request import CreateAnnotationQueueRequest
    from .delete_annotation_queue_assignment_response import (
        DeleteAnnotationQueueAssignmentResponse,
    )
    from .delete_annotation_queue_item_response import DeleteAnnotationQueueItemResponse
    from .paginated_annotation_queue_items import PaginatedAnnotationQueueItems
    from .paginated_annotation_queues import PaginatedAnnotationQueues
    from .update_annotation_queue_item_request import UpdateAnnotationQueueItemRequest
_dynamic_imports: typing.Dict[str, str] = {
    "AnnotationQueue": ".annotation_queue",
    "AnnotationQueueAssignmentRequest": ".annotation_queue_assignment_request",
    "AnnotationQueueItem": ".annotation_queue_item",
    "AnnotationQueueObjectType": ".annotation_queue_object_type",
    "AnnotationQueueStatus": ".annotation_queue_status",
    "CreateAnnotationQueueAssignmentResponse": ".create_annotation_queue_assignment_response",
    "CreateAnnotationQueueItemRequest": ".create_annotation_queue_item_request",
    "CreateAnnotationQueueRequest": ".create_annotation_queue_request",
    "DeleteAnnotationQueueAssignmentResponse": ".delete_annotation_queue_assignment_response",
    "DeleteAnnotationQueueItemResponse": ".delete_annotation_queue_item_response",
    "PaginatedAnnotationQueueItems": ".paginated_annotation_queue_items",
    "PaginatedAnnotationQueues": ".paginated_annotation_queues",
    "UpdateAnnotationQueueItemRequest": ".update_annotation_queue_item_request",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(
            f"No {attr_name} found in _dynamic_imports for module name -> {__name__}"
        )
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(
            f"Failed to import {attr_name} from {module_name}: {e}"
        ) from e
    except AttributeError as e:
        raise AttributeError(
            f"Failed to get {attr_name} from {module_name}: {e}"
        ) from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "AnnotationQueue",
    "AnnotationQueueAssignmentRequest",
    "AnnotationQueueItem",
    "AnnotationQueueObjectType",
    "AnnotationQueueStatus",
    "CreateAnnotationQueueAssignmentResponse",
    "CreateAnnotationQueueItemRequest",
    "CreateAnnotationQueueRequest",
    "DeleteAnnotationQueueAssignmentResponse",
    "DeleteAnnotationQueueItemResponse",
    "PaginatedAnnotationQueueItems",
    "PaginatedAnnotationQueues",
    "UpdateAnnotationQueueItemRequest",
]
