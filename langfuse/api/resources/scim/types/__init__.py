# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .authentication_scheme import AuthenticationScheme
    from .bulk_config import BulkConfig
    from .empty_response import EmptyResponse
    from .filter_config import FilterConfig
    from .resource_meta import ResourceMeta
    from .resource_type import ResourceType
    from .resource_types_response import ResourceTypesResponse
    from .schema_extension import SchemaExtension
    from .schema_resource import SchemaResource
    from .schemas_response import SchemasResponse
    from .scim_email import ScimEmail
    from .scim_feature_support import ScimFeatureSupport
    from .scim_name import ScimName
    from .scim_user import ScimUser
    from .scim_users_list_response import ScimUsersListResponse
    from .service_provider_config import ServiceProviderConfig
    from .user_meta import UserMeta
_dynamic_imports: typing.Dict[str, str] = {
    "AuthenticationScheme": ".authentication_scheme",
    "BulkConfig": ".bulk_config",
    "EmptyResponse": ".empty_response",
    "FilterConfig": ".filter_config",
    "ResourceMeta": ".resource_meta",
    "ResourceType": ".resource_type",
    "ResourceTypesResponse": ".resource_types_response",
    "SchemaExtension": ".schema_extension",
    "SchemaResource": ".schema_resource",
    "SchemasResponse": ".schemas_response",
    "ScimEmail": ".scim_email",
    "ScimFeatureSupport": ".scim_feature_support",
    "ScimName": ".scim_name",
    "ScimUser": ".scim_user",
    "ScimUsersListResponse": ".scim_users_list_response",
    "ServiceProviderConfig": ".service_provider_config",
    "UserMeta": ".user_meta",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(
            f"No {attr_name} found in _dynamic_imports for module name -> {__name__}"
        )
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(
            f"Failed to import {attr_name} from {module_name}: {e}"
        ) from e
    except AttributeError as e:
        raise AttributeError(
            f"Failed to get {attr_name} from {module_name}: {e}"
        ) from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "AuthenticationScheme",
    "BulkConfig",
    "EmptyResponse",
    "FilterConfig",
    "ResourceMeta",
    "ResourceType",
    "ResourceTypesResponse",
    "SchemaExtension",
    "SchemaResource",
    "SchemasResponse",
    "ScimEmail",
    "ScimFeatureSupport",
    "ScimName",
    "ScimUser",
    "ScimUsersListResponse",
    "ServiceProviderConfig",
    "UserMeta",
]
