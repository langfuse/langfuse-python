# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .get_media_response import GetMediaResponse
    from .get_media_upload_url_request import GetMediaUploadUrlRequest
    from .get_media_upload_url_response import GetMediaUploadUrlResponse
    from .media_content_type import MediaContentType
    from .patch_media_body import PatchMediaBody
_dynamic_imports: typing.Dict[str, str] = {
    "GetMediaResponse": ".get_media_response",
    "GetMediaUploadUrlRequest": ".get_media_upload_url_request",
    "GetMediaUploadUrlResponse": ".get_media_upload_url_response",
    "MediaContentType": ".media_content_type",
    "PatchMediaBody": ".patch_media_body",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(
            f"No {attr_name} found in _dynamic_imports for module name -> {__name__}"
        )
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(
            f"Failed to import {attr_name} from {module_name}: {e}"
        ) from e
    except AttributeError as e:
        raise AttributeError(
            f"Failed to get {attr_name} from {module_name}: {e}"
        ) from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "GetMediaResponse",
    "GetMediaUploadUrlRequest",
    "GetMediaUploadUrlResponse",
    "MediaContentType",
    "PatchMediaBody",
]
