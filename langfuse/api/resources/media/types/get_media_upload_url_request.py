# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ....core.serialization import FieldMetadata
from .media_content_type import MediaContentType


class GetMediaUploadUrlRequest(UniversalBaseModel):
    trace_id: typing_extensions.Annotated[str, FieldMetadata(alias="traceId")] = (
        pydantic.Field()
    )
    """
    The trace ID associated with the media record
    """

    observation_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="observationId")
    ] = pydantic.Field(default=None)
    """
    The observation ID associated with the media record. If the media record is associated directly with a trace, this will be null.
    """

    content_type: typing_extensions.Annotated[
        MediaContentType, FieldMetadata(alias="contentType")
    ]
    content_length: typing_extensions.Annotated[
        int, FieldMetadata(alias="contentLength")
    ] = pydantic.Field()
    """
    The size of the media record in bytes
    """

    sha_256_hash: typing_extensions.Annotated[
        str, FieldMetadata(alias="sha256Hash")
    ] = pydantic.Field()
    """
    The SHA-256 hash of the media record
    """

    field: str = pydantic.Field()
    """
    The trace / observation field the media record is associated with. This can be one of `input`, `output`, `metadata`
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
