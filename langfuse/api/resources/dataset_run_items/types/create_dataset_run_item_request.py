# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ....core.serialization import FieldMetadata


class CreateDatasetRunItemRequest(UniversalBaseModel):
    run_name: typing_extensions.Annotated[str, FieldMetadata(alias="runName")]
    run_description: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="runDescription")
    ] = pydantic.Field(default=None)
    """
    Description of the run. If run exists, description will be updated.
    """

    metadata: typing.Optional[typing.Optional[typing.Any]] = pydantic.Field(
        default=None
    )
    """
    Metadata of the dataset run, updates run if run already exists
    """

    dataset_item_id: typing_extensions.Annotated[
        str, FieldMetadata(alias="datasetItemId")
    ]
    observation_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="observationId")
    ] = None
    trace_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="traceId")
    ] = pydantic.Field(default=None)
    """
    traceId should always be provided. For compatibility with older SDK versions it can also be inferred from the provided observationId.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
