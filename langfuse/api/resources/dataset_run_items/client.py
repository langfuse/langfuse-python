# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ..commons.types.dataset_run_item import DatasetRunItem
from .raw_client import AsyncRawDatasetRunItemsClient, RawDatasetRunItemsClient
from .types.create_dataset_run_item_request import CreateDatasetRunItemRequest
from .types.paginated_dataset_run_items import PaginatedDatasetRunItems

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class DatasetRunItemsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawDatasetRunItemsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawDatasetRunItemsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawDatasetRunItemsClient
        """
        return self._raw_client

    def create(
        self,
        *,
        request: CreateDatasetRunItemRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DatasetRunItem:
        """
        Create a dataset run item

        Parameters
        ----------
        request : CreateDatasetRunItemRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DatasetRunItem

        Examples
        --------
        from langfuse import FernLangfuse
        from langfuse.resources.dataset_run_items import CreateDatasetRunItemRequest

        client = FernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )
        client.dataset_run_items.create(
            request=CreateDatasetRunItemRequest(
                run_name="runName",
                dataset_item_id="datasetItemId",
            ),
        )
        """
        _response = self._raw_client.create(
            request=request, request_options=request_options
        )
        return _response.data

    def list(
        self,
        *,
        dataset_id: str,
        run_name: str,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedDatasetRunItems:
        """
        List dataset run items

        Parameters
        ----------
        dataset_id : str

        run_name : str

        page : typing.Optional[int]
            page number, starts at 1

        limit : typing.Optional[int]
            limit of items per page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedDatasetRunItems

        Examples
        --------
        from langfuse import FernLangfuse

        client = FernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )
        client.dataset_run_items.list(
            dataset_id="datasetId",
            run_name="runName",
        )
        """
        _response = self._raw_client.list(
            dataset_id=dataset_id,
            run_name=run_name,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data


class AsyncDatasetRunItemsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawDatasetRunItemsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawDatasetRunItemsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawDatasetRunItemsClient
        """
        return self._raw_client

    async def create(
        self,
        *,
        request: CreateDatasetRunItemRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DatasetRunItem:
        """
        Create a dataset run item

        Parameters
        ----------
        request : CreateDatasetRunItemRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DatasetRunItem

        Examples
        --------
        import asyncio

        from langfuse import AsyncFernLangfuse
        from langfuse.resources.dataset_run_items import CreateDatasetRunItemRequest

        client = AsyncFernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.dataset_run_items.create(
                request=CreateDatasetRunItemRequest(
                    run_name="runName",
                    dataset_item_id="datasetItemId",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            request=request, request_options=request_options
        )
        return _response.data

    async def list(
        self,
        *,
        dataset_id: str,
        run_name: str,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedDatasetRunItems:
        """
        List dataset run items

        Parameters
        ----------
        dataset_id : str

        run_name : str

        page : typing.Optional[int]
            page number, starts at 1

        limit : typing.Optional[int]
            limit of items per page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedDatasetRunItems

        Examples
        --------
        import asyncio

        from langfuse import AsyncFernLangfuse

        client = AsyncFernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.dataset_run_items.list(
                dataset_id="datasetId",
                run_name="runName",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            dataset_id=dataset_id,
            run_name=run_name,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data
