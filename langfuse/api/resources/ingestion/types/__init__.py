# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .base_event import BaseEvent
    from .create_event_body import CreateEventBody
    from .create_event_event import CreateEventEvent
    from .create_generation_body import CreateGenerationBody
    from .create_generation_event import CreateGenerationEvent
    from .create_observation_event import CreateObservationEvent
    from .create_span_body import CreateSpanBody
    from .create_span_event import CreateSpanEvent
    from .ingestion_error import IngestionError
    from .ingestion_event import (
        IngestionEvent,
        IngestionEvent_EventCreate,
        IngestionEvent_GenerationCreate,
        IngestionEvent_GenerationUpdate,
        IngestionEvent_ObservationCreate,
        IngestionEvent_ObservationUpdate,
        IngestionEvent_ScoreCreate,
        IngestionEvent_SdkLog,
        IngestionEvent_SpanCreate,
        IngestionEvent_SpanUpdate,
        IngestionEvent_TraceCreate,
    )
    from .ingestion_response import IngestionResponse
    from .ingestion_success import IngestionSuccess
    from .ingestion_usage import IngestionUsage
    from .observation_body import ObservationBody
    from .observation_type import ObservationType
    from .open_ai_completion_usage_schema import OpenAiCompletionUsageSchema
    from .open_ai_response_usage_schema import OpenAiResponseUsageSchema
    from .open_ai_usage import OpenAiUsage
    from .optional_observation_body import OptionalObservationBody
    from .score_body import ScoreBody
    from .score_event import ScoreEvent
    from .sdk_log_body import SdkLogBody
    from .sdk_log_event import SdkLogEvent
    from .trace_body import TraceBody
    from .trace_event import TraceEvent
    from .update_event_body import UpdateEventBody
    from .update_generation_body import UpdateGenerationBody
    from .update_generation_event import UpdateGenerationEvent
    from .update_observation_event import UpdateObservationEvent
    from .update_span_body import UpdateSpanBody
    from .update_span_event import UpdateSpanEvent
    from .usage_details import UsageDetails
_dynamic_imports: typing.Dict[str, str] = {
    "BaseEvent": ".base_event",
    "CreateEventBody": ".create_event_body",
    "CreateEventEvent": ".create_event_event",
    "CreateGenerationBody": ".create_generation_body",
    "CreateGenerationEvent": ".create_generation_event",
    "CreateObservationEvent": ".create_observation_event",
    "CreateSpanBody": ".create_span_body",
    "CreateSpanEvent": ".create_span_event",
    "IngestionError": ".ingestion_error",
    "IngestionEvent": ".ingestion_event",
    "IngestionEvent_EventCreate": ".ingestion_event",
    "IngestionEvent_GenerationCreate": ".ingestion_event",
    "IngestionEvent_GenerationUpdate": ".ingestion_event",
    "IngestionEvent_ObservationCreate": ".ingestion_event",
    "IngestionEvent_ObservationUpdate": ".ingestion_event",
    "IngestionEvent_ScoreCreate": ".ingestion_event",
    "IngestionEvent_SdkLog": ".ingestion_event",
    "IngestionEvent_SpanCreate": ".ingestion_event",
    "IngestionEvent_SpanUpdate": ".ingestion_event",
    "IngestionEvent_TraceCreate": ".ingestion_event",
    "IngestionResponse": ".ingestion_response",
    "IngestionSuccess": ".ingestion_success",
    "IngestionUsage": ".ingestion_usage",
    "ObservationBody": ".observation_body",
    "ObservationType": ".observation_type",
    "OpenAiCompletionUsageSchema": ".open_ai_completion_usage_schema",
    "OpenAiResponseUsageSchema": ".open_ai_response_usage_schema",
    "OpenAiUsage": ".open_ai_usage",
    "OptionalObservationBody": ".optional_observation_body",
    "ScoreBody": ".score_body",
    "ScoreEvent": ".score_event",
    "SdkLogBody": ".sdk_log_body",
    "SdkLogEvent": ".sdk_log_event",
    "TraceBody": ".trace_body",
    "TraceEvent": ".trace_event",
    "UpdateEventBody": ".update_event_body",
    "UpdateGenerationBody": ".update_generation_body",
    "UpdateGenerationEvent": ".update_generation_event",
    "UpdateObservationEvent": ".update_observation_event",
    "UpdateSpanBody": ".update_span_body",
    "UpdateSpanEvent": ".update_span_event",
    "UsageDetails": ".usage_details",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(
            f"No {attr_name} found in _dynamic_imports for module name -> {__name__}"
        )
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(
            f"Failed to import {attr_name} from {module_name}: {e}"
        ) from e
    except AttributeError as e:
        raise AttributeError(
            f"Failed to get {attr_name} from {module_name}: {e}"
        ) from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "BaseEvent",
    "CreateEventBody",
    "CreateEventEvent",
    "CreateGenerationBody",
    "CreateGenerationEvent",
    "CreateObservationEvent",
    "CreateSpanBody",
    "CreateSpanEvent",
    "IngestionError",
    "IngestionEvent",
    "IngestionEvent_EventCreate",
    "IngestionEvent_GenerationCreate",
    "IngestionEvent_GenerationUpdate",
    "IngestionEvent_ObservationCreate",
    "IngestionEvent_ObservationUpdate",
    "IngestionEvent_ScoreCreate",
    "IngestionEvent_SdkLog",
    "IngestionEvent_SpanCreate",
    "IngestionEvent_SpanUpdate",
    "IngestionEvent_TraceCreate",
    "IngestionResponse",
    "IngestionSuccess",
    "IngestionUsage",
    "ObservationBody",
    "ObservationType",
    "OpenAiCompletionUsageSchema",
    "OpenAiResponseUsageSchema",
    "OpenAiUsage",
    "OptionalObservationBody",
    "ScoreBody",
    "ScoreEvent",
    "SdkLogBody",
    "SdkLogEvent",
    "TraceBody",
    "TraceEvent",
    "UpdateEventBody",
    "UpdateGenerationBody",
    "UpdateGenerationEvent",
    "UpdateObservationEvent",
    "UpdateSpanBody",
    "UpdateSpanEvent",
    "UsageDetails",
]
