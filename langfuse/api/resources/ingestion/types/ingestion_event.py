# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .create_event_body import CreateEventBody
from .create_generation_body import CreateGenerationBody
from .create_span_body import CreateSpanBody
from .observation_body import ObservationBody
from .score_body import ScoreBody
from .sdk_log_body import SdkLogBody
from .trace_body import TraceBody
from .update_generation_body import UpdateGenerationBody
from .update_span_body import UpdateSpanBody


class IngestionEvent_TraceCreate(UniversalBaseModel):
    type: typing.Literal["trace-create"] = "trace-create"
    body: TraceBody
    id: str
    timestamp: str
    metadata: typing.Optional[typing.Optional[typing.Any]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class IngestionEvent_ScoreCreate(UniversalBaseModel):
    type: typing.Literal["score-create"] = "score-create"
    body: ScoreBody
    id: str
    timestamp: str
    metadata: typing.Optional[typing.Optional[typing.Any]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class IngestionEvent_SpanCreate(UniversalBaseModel):
    type: typing.Literal["span-create"] = "span-create"
    body: CreateSpanBody
    id: str
    timestamp: str
    metadata: typing.Optional[typing.Optional[typing.Any]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class IngestionEvent_SpanUpdate(UniversalBaseModel):
    type: typing.Literal["span-update"] = "span-update"
    body: UpdateSpanBody
    id: str
    timestamp: str
    metadata: typing.Optional[typing.Optional[typing.Any]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class IngestionEvent_GenerationCreate(UniversalBaseModel):
    type: typing.Literal["generation-create"] = "generation-create"
    body: CreateGenerationBody
    id: str
    timestamp: str
    metadata: typing.Optional[typing.Optional[typing.Any]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class IngestionEvent_GenerationUpdate(UniversalBaseModel):
    type: typing.Literal["generation-update"] = "generation-update"
    body: UpdateGenerationBody
    id: str
    timestamp: str
    metadata: typing.Optional[typing.Optional[typing.Any]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class IngestionEvent_EventCreate(UniversalBaseModel):
    type: typing.Literal["event-create"] = "event-create"
    body: CreateEventBody
    id: str
    timestamp: str
    metadata: typing.Optional[typing.Optional[typing.Any]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class IngestionEvent_SdkLog(UniversalBaseModel):
    type: typing.Literal["sdk-log"] = "sdk-log"
    body: SdkLogBody
    id: str
    timestamp: str
    metadata: typing.Optional[typing.Optional[typing.Any]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class IngestionEvent_ObservationCreate(UniversalBaseModel):
    type: typing.Literal["observation-create"] = "observation-create"
    body: ObservationBody
    id: str
    timestamp: str
    metadata: typing.Optional[typing.Optional[typing.Any]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class IngestionEvent_ObservationUpdate(UniversalBaseModel):
    type: typing.Literal["observation-update"] = "observation-update"
    body: ObservationBody
    id: str
    timestamp: str
    metadata: typing.Optional[typing.Optional[typing.Any]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


IngestionEvent = typing.Union[
    IngestionEvent_TraceCreate,
    IngestionEvent_ScoreCreate,
    IngestionEvent_SpanCreate,
    IngestionEvent_SpanUpdate,
    IngestionEvent_GenerationCreate,
    IngestionEvent_GenerationUpdate,
    IngestionEvent_EventCreate,
    IngestionEvent_SdkLog,
    IngestionEvent_ObservationCreate,
    IngestionEvent_ObservationUpdate,
]
