# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ....core.serialization import FieldMetadata
from ...commons.types.dataset_status import DatasetStatus


class CreateDatasetItemRequest(UniversalBaseModel):
    dataset_name: typing_extensions.Annotated[str, FieldMetadata(alias="datasetName")]
    input: typing.Optional[typing.Optional[typing.Any]] = None
    expected_output: typing_extensions.Annotated[
        typing.Optional[typing.Optional[typing.Any]],
        FieldMetadata(alias="expectedOutput"),
    ] = None
    metadata: typing.Optional[typing.Optional[typing.Any]] = None
    source_trace_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="sourceTraceId")
    ] = None
    source_observation_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="sourceObservationId")
    ] = None
    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Dataset items are upserted on their id. Id needs to be unique (project-level) and cannot be reused across datasets.
    """

    status: typing.Optional[DatasetStatus] = pydantic.Field(default=None)
    """
    Defaults to ACTIVE for newly created items
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
