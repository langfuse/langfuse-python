# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from .raw_client import (
    AsyncRawBlobStorageIntegrationsClient,
    RawBlobStorageIntegrationsClient,
)
from .types.blob_storage_integration_deletion_response import (
    BlobStorageIntegrationDeletionResponse,
)
from .types.blob_storage_integration_response import BlobStorageIntegrationResponse
from .types.blob_storage_integrations_response import BlobStorageIntegrationsResponse
from .types.create_blob_storage_integration_request import (
    CreateBlobStorageIntegrationRequest,
)

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class BlobStorageIntegrationsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawBlobStorageIntegrationsClient(
            client_wrapper=client_wrapper
        )

    @property
    def with_raw_response(self) -> RawBlobStorageIntegrationsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawBlobStorageIntegrationsClient
        """
        return self._raw_client

    def get_blob_storage_integrations(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> BlobStorageIntegrationsResponse:
        """
        Get all blob storage integrations for the organization (requires organization-scoped API key)

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BlobStorageIntegrationsResponse

        Examples
        --------
        from langfuse import FernLangfuse

        client = FernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )
        client.blob_storage_integrations.get_blob_storage_integrations()
        """
        _response = self._raw_client.get_blob_storage_integrations(
            request_options=request_options
        )
        return _response.data

    def upsert_blob_storage_integration(
        self,
        *,
        request: CreateBlobStorageIntegrationRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BlobStorageIntegrationResponse:
        """
        Create or update a blob storage integration for a specific project (requires organization-scoped API key). The configuration is validated by performing a test upload to the bucket.

        Parameters
        ----------
        request : CreateBlobStorageIntegrationRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BlobStorageIntegrationResponse

        Examples
        --------
        from langfuse import FernLangfuse
        from langfuse.resources.blob_storage_integrations import (
            CreateBlobStorageIntegrationRequest,
        )

        client = FernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )
        client.blob_storage_integrations.upsert_blob_storage_integration(
            request=CreateBlobStorageIntegrationRequest(
                project_id="projectId",
                type="S3",
                bucket_name="bucketName",
                region="region",
                export_frequency="hourly",
                enabled=True,
                force_path_style=True,
                file_type="JSON",
                export_mode="FULL_HISTORY",
            ),
        )
        """
        _response = self._raw_client.upsert_blob_storage_integration(
            request=request, request_options=request_options
        )
        return _response.data

    def delete_blob_storage_integration(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> BlobStorageIntegrationDeletionResponse:
        """
        Delete a blob storage integration by ID (requires organization-scoped API key)

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BlobStorageIntegrationDeletionResponse

        Examples
        --------
        from langfuse import FernLangfuse

        client = FernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )
        client.blob_storage_integrations.delete_blob_storage_integration(
            id="id",
        )
        """
        _response = self._raw_client.delete_blob_storage_integration(
            id, request_options=request_options
        )
        return _response.data


class AsyncBlobStorageIntegrationsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawBlobStorageIntegrationsClient(
            client_wrapper=client_wrapper
        )

    @property
    def with_raw_response(self) -> AsyncRawBlobStorageIntegrationsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawBlobStorageIntegrationsClient
        """
        return self._raw_client

    async def get_blob_storage_integrations(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> BlobStorageIntegrationsResponse:
        """
        Get all blob storage integrations for the organization (requires organization-scoped API key)

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BlobStorageIntegrationsResponse

        Examples
        --------
        import asyncio

        from langfuse import AsyncFernLangfuse

        client = AsyncFernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.blob_storage_integrations.get_blob_storage_integrations()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_blob_storage_integrations(
            request_options=request_options
        )
        return _response.data

    async def upsert_blob_storage_integration(
        self,
        *,
        request: CreateBlobStorageIntegrationRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BlobStorageIntegrationResponse:
        """
        Create or update a blob storage integration for a specific project (requires organization-scoped API key). The configuration is validated by performing a test upload to the bucket.

        Parameters
        ----------
        request : CreateBlobStorageIntegrationRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BlobStorageIntegrationResponse

        Examples
        --------
        import asyncio

        from langfuse import AsyncFernLangfuse
        from langfuse.resources.blob_storage_integrations import (
            CreateBlobStorageIntegrationRequest,
        )

        client = AsyncFernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.blob_storage_integrations.upsert_blob_storage_integration(
                request=CreateBlobStorageIntegrationRequest(
                    project_id="projectId",
                    type="S3",
                    bucket_name="bucketName",
                    region="region",
                    export_frequency="hourly",
                    enabled=True,
                    force_path_style=True,
                    file_type="JSON",
                    export_mode="FULL_HISTORY",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.upsert_blob_storage_integration(
            request=request, request_options=request_options
        )
        return _response.data

    async def delete_blob_storage_integration(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> BlobStorageIntegrationDeletionResponse:
        """
        Delete a blob storage integration by ID (requires organization-scoped API key)

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BlobStorageIntegrationDeletionResponse

        Examples
        --------
        import asyncio

        from langfuse import AsyncFernLangfuse

        client = AsyncFernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.blob_storage_integrations.delete_blob_storage_integration(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_blob_storage_integration(
            id, request_options=request_options
        )
        return _response.data
