# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ....core.serialization import FieldMetadata
from .blob_storage_export_frequency import BlobStorageExportFrequency
from .blob_storage_export_mode import BlobStorageExportMode
from .blob_storage_integration_file_type import BlobStorageIntegrationFileType
from .blob_storage_integration_type import BlobStorageIntegrationType


class CreateBlobStorageIntegrationRequest(UniversalBaseModel):
    project_id: typing_extensions.Annotated[str, FieldMetadata(alias="projectId")] = (
        pydantic.Field()
    )
    """
    ID of the project in which to configure the blob storage integration
    """

    type: BlobStorageIntegrationType
    bucket_name: typing_extensions.Annotated[str, FieldMetadata(alias="bucketName")] = (
        pydantic.Field()
    )
    """
    Name of the storage bucket
    """

    endpoint: typing.Optional[str] = pydantic.Field(default=None)
    """
    Custom endpoint URL (required for S3_COMPATIBLE type)
    """

    region: str = pydantic.Field()
    """
    Storage region
    """

    access_key_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="accessKeyId")
    ] = pydantic.Field(default=None)
    """
    Access key ID for authentication
    """

    secret_access_key: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="secretAccessKey")
    ] = pydantic.Field(default=None)
    """
    Secret access key for authentication (will be encrypted when stored)
    """

    prefix: typing.Optional[str] = pydantic.Field(default=None)
    """
    Path prefix for exported files (must end with forward slash if provided)
    """

    export_frequency: typing_extensions.Annotated[
        BlobStorageExportFrequency, FieldMetadata(alias="exportFrequency")
    ]
    enabled: bool = pydantic.Field()
    """
    Whether the integration is active
    """

    force_path_style: typing_extensions.Annotated[
        bool, FieldMetadata(alias="forcePathStyle")
    ] = pydantic.Field()
    """
    Use path-style URLs for S3 requests
    """

    file_type: typing_extensions.Annotated[
        BlobStorageIntegrationFileType, FieldMetadata(alias="fileType")
    ]
    export_mode: typing_extensions.Annotated[
        BlobStorageExportMode, FieldMetadata(alias="exportMode")
    ]
    export_start_date: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="exportStartDate")
    ] = pydantic.Field(default=None)
    """
    Custom start date for exports (required when exportMode is FROM_CUSTOM_DATE)
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
