# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ....core.serialization import FieldMetadata
from .blob_storage_export_frequency import BlobStorageExportFrequency
from .blob_storage_export_mode import BlobStorageExportMode
from .blob_storage_integration_file_type import BlobStorageIntegrationFileType
from .blob_storage_integration_type import BlobStorageIntegrationType


class BlobStorageIntegrationResponse(UniversalBaseModel):
    id: str
    project_id: typing_extensions.Annotated[str, FieldMetadata(alias="projectId")]
    type: BlobStorageIntegrationType
    bucket_name: typing_extensions.Annotated[str, FieldMetadata(alias="bucketName")]
    endpoint: typing.Optional[str] = None
    region: str
    access_key_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="accessKeyId")
    ] = None
    prefix: str
    export_frequency: typing_extensions.Annotated[
        BlobStorageExportFrequency, FieldMetadata(alias="exportFrequency")
    ]
    enabled: bool
    force_path_style: typing_extensions.Annotated[
        bool, FieldMetadata(alias="forcePathStyle")
    ]
    file_type: typing_extensions.Annotated[
        BlobStorageIntegrationFileType, FieldMetadata(alias="fileType")
    ]
    export_mode: typing_extensions.Annotated[
        BlobStorageExportMode, FieldMetadata(alias="exportMode")
    ]
    export_start_date: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="exportStartDate")
    ] = None
    next_sync_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="nextSyncAt")
    ] = None
    last_sync_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="lastSyncAt")
    ] = None
    created_at: typing_extensions.Annotated[
        dt.datetime, FieldMetadata(alias="createdAt")
    ]
    updated_at: typing_extensions.Annotated[
        dt.datetime, FieldMetadata(alias="updatedAt")
    ]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
