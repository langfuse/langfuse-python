# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ....core.serialization import FieldMetadata


class CreateCommentRequest(UniversalBaseModel):
    project_id: typing_extensions.Annotated[str, FieldMetadata(alias="projectId")] = (
        pydantic.Field()
    )
    """
    The id of the project to attach the comment to.
    """

    object_type: typing_extensions.Annotated[str, FieldMetadata(alias="objectType")] = (
        pydantic.Field()
    )
    """
    The type of the object to attach the comment to (trace, observation, session, prompt).
    """

    object_id: typing_extensions.Annotated[str, FieldMetadata(alias="objectId")] = (
        pydantic.Field()
    )
    """
    The id of the object to attach the comment to. If this does not reference a valid existing object, an error will be thrown.
    """

    content: str = pydantic.Field()
    """
    The content of the comment. May include markdown. Currently limited to 3000 characters.
    """

    author_user_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="authorUserId")
    ] = pydantic.Field(default=None)
    """
    The id of the user who created the comment.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
