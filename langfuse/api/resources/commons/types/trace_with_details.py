# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .trace import Trace

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class TraceWithDetails(Trace):
    html_path: str = pydantic.Field(
        alias="htmlPath", description="Path of trace in Langfuse UI"
    )
    latency: float = pydantic.Field(description="Latency of trace in seconds")
    total_cost: float = pydantic.Field(
        alias="totalCost", description="Cost of trace in USD"
    )
    observations: typing.List[str] = pydantic.Field(
        description="List of observation ids"
    )
    scores: typing.List[str] = pydantic.Field(description="List of score ids")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
