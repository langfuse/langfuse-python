# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ....core.serialization import FieldMetadata


class DatasetRun(UniversalBaseModel):
    id: str = pydantic.Field()
    """
    Unique identifier of the dataset run
    """

    name: str = pydantic.Field()
    """
    Name of the dataset run
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    Description of the run
    """

    metadata: typing.Optional[typing.Optional[typing.Any]] = pydantic.Field(
        default=None
    )
    """
    Metadata of the dataset run
    """

    dataset_id: typing_extensions.Annotated[str, FieldMetadata(alias="datasetId")] = (
        pydantic.Field()
    )
    """
    Id of the associated dataset
    """

    dataset_name: typing_extensions.Annotated[
        str, FieldMetadata(alias="datasetName")
    ] = pydantic.Field()
    """
    Name of the associated dataset
    """

    created_at: typing_extensions.Annotated[
        dt.datetime, FieldMetadata(alias="createdAt")
    ] = pydantic.Field()
    """
    The date and time when the dataset run was created
    """

    updated_at: typing_extensions.Annotated[
        dt.datetime, FieldMetadata(alias="updatedAt")
    ] = pydantic.Field()
    """
    The date and time when the dataset run was last updated
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
