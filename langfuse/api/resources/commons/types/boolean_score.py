# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2
from ....core.serialization import FieldMetadata
from .base_score import BaseScore


class BooleanScore(BaseScore):
    value: float = pydantic.Field()
    """
    The numeric value of the score. Equals 1 for "True" and 0 for "False"
    """

    string_value: typing_extensions.Annotated[
        str, FieldMetadata(alias="stringValue")
    ] = pydantic.Field()
    """
    The string representation of the score value. Is inferred from the numeric value and equals "True" or "False"
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
