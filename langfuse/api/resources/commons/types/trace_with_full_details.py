# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2
from ....core.serialization import FieldMetadata
from .observations_view import ObservationsView
from .score_v_1 import ScoreV1
from .trace import Trace


class TraceWithFullDetails(Trace):
    html_path: typing_extensions.Annotated[str, FieldMetadata(alias="htmlPath")] = (
        pydantic.Field()
    )
    """
    Path of trace in Langfuse UI
    """

    latency: float = pydantic.Field()
    """
    Latency of trace in seconds
    """

    total_cost: typing_extensions.Annotated[float, FieldMetadata(alias="totalCost")] = (
        pydantic.Field()
    )
    """
    Cost of trace in USD
    """

    observations: typing.List[ObservationsView] = pydantic.Field()
    """
    List of observations
    """

    scores: typing.List[ScoreV1] = pydantic.Field()
    """
    List of scores
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
