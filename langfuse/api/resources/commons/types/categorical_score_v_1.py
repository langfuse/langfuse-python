# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2
from ....core.serialization import FieldMetadata
from .base_score_v_1 import BaseScoreV1


class CategoricalScoreV1(BaseScoreV1):
    value: typing.Optional[float] = pydantic.Field(default=None)
    """
    Only defined if a config is linked. Represents the numeric category mapping of the stringValue
    """

    string_value: typing_extensions.Annotated[
        str, FieldMetadata(alias="stringValue")
    ] = pydantic.Field()
    """
    The string representation of the score value. If no config is linked, can be any string. Otherwise, must map to a config category
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
