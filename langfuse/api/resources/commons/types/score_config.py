# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ....core.serialization import FieldMetadata
from .config_category import ConfigCategory
from .score_data_type import ScoreDataType


class ScoreConfig(UniversalBaseModel):
    """
    Configuration for a score
    """

    id: str
    name: str
    created_at: typing_extensions.Annotated[
        dt.datetime, FieldMetadata(alias="createdAt")
    ]
    updated_at: typing_extensions.Annotated[
        dt.datetime, FieldMetadata(alias="updatedAt")
    ]
    project_id: typing_extensions.Annotated[str, FieldMetadata(alias="projectId")]
    data_type: typing_extensions.Annotated[
        ScoreDataType, FieldMetadata(alias="dataType")
    ]
    is_archived: typing_extensions.Annotated[
        bool, FieldMetadata(alias="isArchived")
    ] = pydantic.Field()
    """
    Whether the score config is archived. Defaults to false
    """

    min_value: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="minValue")
    ] = pydantic.Field(default=None)
    """
    Sets minimum value for numerical scores. If not set, the minimum value defaults to -∞
    """

    max_value: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="maxValue")
    ] = pydantic.Field(default=None)
    """
    Sets maximum value for numerical scores. If not set, the maximum value defaults to +∞
    """

    categories: typing.Optional[typing.List[ConfigCategory]] = pydantic.Field(
        default=None
    )
    """
    Configures custom categories for categorical scores
    """

    description: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
