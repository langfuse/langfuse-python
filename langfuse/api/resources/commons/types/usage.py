# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .model_usage_unit import ModelUsageUnit

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Usage(pydantic.BaseModel):
    """
    Standard interface for usage and cost
    """

    input: typing.Optional[int] = pydantic.Field(
        default=None, description="Number of input units (e.g. tokens)"
    )
    output: typing.Optional[int] = pydantic.Field(
        default=None, description="Number of output units (e.g. tokens)"
    )
    total: typing.Optional[int] = pydantic.Field(
        default=None, description="Defaults to input+output if not set"
    )
    unit: typing.Optional[ModelUsageUnit] = None
    input_cost: typing.Optional[float] = pydantic.Field(
        alias="inputCost", default=None, description="USD input cost"
    )
    output_cost: typing.Optional[float] = pydantic.Field(
        alias="outputCost", default=None, description="USD output cost"
    )
    total_cost: typing.Optional[float] = pydantic.Field(
        alias="totalCost",
        default=None,
        description="USD total cost, defaults to input+output",
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
