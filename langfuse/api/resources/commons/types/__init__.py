# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .base_score import BaseScore
    from .base_score_v_1 import BaseScoreV1
    from .boolean_score import BooleanScore
    from .boolean_score_v_1 import BooleanScoreV1
    from .categorical_score import CategoricalScore
    from .categorical_score_v_1 import CategoricalScoreV1
    from .comment import Comment
    from .comment_object_type import CommentObjectType
    from .config_category import ConfigCategory
    from .create_score_value import CreateScoreValue
    from .dataset import Dataset
    from .dataset_item import DatasetItem
    from .dataset_run import DatasetRun
    from .dataset_run_item import DatasetRunItem
    from .dataset_run_with_items import DatasetRunWithItems
    from .dataset_status import DatasetStatus
    from .map_value import MapValue
    from .model import Model
    from .model_price import ModelPrice
    from .model_usage_unit import ModelUsageUnit
    from .numeric_score import NumericScore
    from .numeric_score_v_1 import NumericScoreV1
    from .observation import Observation
    from .observation_level import ObservationLevel
    from .observations_view import ObservationsView
    from .score import Score, Score_Boolean, Score_Categorical, Score_Numeric
    from .score_config import ScoreConfig
    from .score_data_type import ScoreDataType
    from .score_source import ScoreSource
    from .score_v_1 import (
        ScoreV1,
        ScoreV1_Boolean,
        ScoreV1_Categorical,
        ScoreV1_Numeric,
    )
    from .session import Session
    from .session_with_traces import SessionWithTraces
    from .trace import Trace
    from .trace_with_details import TraceWithDetails
    from .trace_with_full_details import TraceWithFullDetails
    from .usage import Usage
_dynamic_imports: typing.Dict[str, str] = {
    "BaseScore": ".base_score",
    "BaseScoreV1": ".base_score_v_1",
    "BooleanScore": ".boolean_score",
    "BooleanScoreV1": ".boolean_score_v_1",
    "CategoricalScore": ".categorical_score",
    "CategoricalScoreV1": ".categorical_score_v_1",
    "Comment": ".comment",
    "CommentObjectType": ".comment_object_type",
    "ConfigCategory": ".config_category",
    "CreateScoreValue": ".create_score_value",
    "Dataset": ".dataset",
    "DatasetItem": ".dataset_item",
    "DatasetRun": ".dataset_run",
    "DatasetRunItem": ".dataset_run_item",
    "DatasetRunWithItems": ".dataset_run_with_items",
    "DatasetStatus": ".dataset_status",
    "MapValue": ".map_value",
    "Model": ".model",
    "ModelPrice": ".model_price",
    "ModelUsageUnit": ".model_usage_unit",
    "NumericScore": ".numeric_score",
    "NumericScoreV1": ".numeric_score_v_1",
    "Observation": ".observation",
    "ObservationLevel": ".observation_level",
    "ObservationsView": ".observations_view",
    "Score": ".score",
    "ScoreConfig": ".score_config",
    "ScoreDataType": ".score_data_type",
    "ScoreSource": ".score_source",
    "ScoreV1": ".score_v_1",
    "ScoreV1_Boolean": ".score_v_1",
    "ScoreV1_Categorical": ".score_v_1",
    "ScoreV1_Numeric": ".score_v_1",
    "Score_Boolean": ".score",
    "Score_Categorical": ".score",
    "Score_Numeric": ".score",
    "Session": ".session",
    "SessionWithTraces": ".session_with_traces",
    "Trace": ".trace",
    "TraceWithDetails": ".trace_with_details",
    "TraceWithFullDetails": ".trace_with_full_details",
    "Usage": ".usage",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(
            f"No {attr_name} found in _dynamic_imports for module name -> {__name__}"
        )
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(
            f"Failed to import {attr_name} from {module_name}: {e}"
        ) from e
    except AttributeError as e:
        raise AttributeError(
            f"Failed to get {attr_name} from {module_name}: {e}"
        ) from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "BaseScore",
    "BaseScoreV1",
    "BooleanScore",
    "BooleanScoreV1",
    "CategoricalScore",
    "CategoricalScoreV1",
    "Comment",
    "CommentObjectType",
    "ConfigCategory",
    "CreateScoreValue",
    "Dataset",
    "DatasetItem",
    "DatasetRun",
    "DatasetRunItem",
    "DatasetRunWithItems",
    "DatasetStatus",
    "MapValue",
    "Model",
    "ModelPrice",
    "ModelUsageUnit",
    "NumericScore",
    "NumericScoreV1",
    "Observation",
    "ObservationLevel",
    "ObservationsView",
    "Score",
    "ScoreConfig",
    "ScoreDataType",
    "ScoreSource",
    "ScoreV1",
    "ScoreV1_Boolean",
    "ScoreV1_Categorical",
    "ScoreV1_Numeric",
    "Score_Boolean",
    "Score_Categorical",
    "Score_Numeric",
    "Session",
    "SessionWithTraces",
    "Trace",
    "TraceWithDetails",
    "TraceWithFullDetails",
    "Usage",
]
